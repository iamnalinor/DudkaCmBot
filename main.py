# –±–æ—Ç by TG: @amok_golub –¥–ª—è –ê–ª–µ–∫—Å–∞
# „Éæ(Ôºæ-Ôºæ)„Éé

import aiogram
import datetime
import random
import time
import requests
import io
from textwrap import wrap
from gtts import gTTS
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.helper import Helper, HelperMode, ListItem
from html import escape
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.exceptions import BotBlocked
import asyncio
from aiogram.utils.exceptions import Unauthorized
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from io import StringIO
import sys
from aiogram.utils.exceptions import Throttled
import socket
from aiogram.types import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
import os
import re
import json
import base64
import asyncio
import requests
from typing import List
print("[INFO] –ë–û–¢ –ó–ê–ü–£–©–ï–ù")
print("[INFO] –£–î–ê–ß–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")

import db
import cdb
import config
import texts

async def send_adm(dp):
	await bot.send_message(chat_id=config.ADMIN_ID, text='‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

db.CreateDB()
cdb.CreateChatDB()

bot = aiogram.Bot(config.TOKEN, parse_mode='HTML')
dp = aiogram.Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['help', 'cmd', '—Ö–µ–ª–ø'], commands_prefix='!./')
async def profcheck(message):
	await message.reply(f"""
–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/admin_dev id - –¥–∞–µ—Ç DEV —Å—Ç–∞—Ç—É—Å (id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /p)
/admin_vip id - –¥–∞–µ—Ç VIP —Å—Ç–∞—Ç—É—Å (id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /p)
/p —Ä–µ–ø–ª–∞–π - —á–µ–∫–∞–µ—Ç –∏–Ω—Ñ—É –æ —é–∑–µ—Ä–µ –ø–æ —Ä–µ–ø–ª–∞—é
/ban —Ä–µ–ø–ª–∞–π - –±–∞–Ω–∏—Ç
/unban —Ä–µ–ø–ª–∞–π
/mute —Ä–µ–ø–ª–∞–π
/unmute —Ä–µ–ø–ª–∞–π
/help - –¥–∞
/avip - –≤—ã–≤–æ–¥–∏—Ç VIP –ø–∞–Ω–µ–ª—å
/adev - –≤—ã–≤–æ–¥–∏—Ç –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

–ì—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∞: {config.ADMIN_GROUP}
""")

@dp.message_handler(commands=['p', '–ø'], commands_prefix='!./')
async def profil_check(message):
	if not message.reply_to_message:
		await message.reply('–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–ª–∞–π!')
	mrtmfui = message.reply_to_message.from_user.id
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {mrtmfui}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.reply_to_message.from_user.first_name, message.reply_to_message.from_user.id)
		await message.reply(f"{message.reply_to_message.from_user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
	for row in db.cursor.execute(f"SELECT vip FROM aleks_bot where id = {message.reply_to_message.from_user.id}"):
		if row[0] == 'on':
			emot = '‚úÖ'
		elif row[0] == 'off':
			emot = '‚ùå'
		await message.reply(f"""
üíØ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µüíØ

–ò–º—è: <code>{message.reply_to_message.from_user.first_name}</code>
–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.reply_to_message.from_user.username}
ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.reply_to_message.from_user.id}</code>
VIP —Å—Ç–∞—Ç—É—Å: {emot}
""")

@dp.message_handler(commands=['–±–∞–Ω', 'ban'], commands_prefix='!./', is_chat_admin=True)
async def cmd_ban(message):
  comment = " ".join(message.text.split()[1:])
  admin_mention = message.from_user.mention
  banned_user_mention = message.reply_to_message.from_user.mention
  await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False))
  await message.reply(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_mention}\n–ó–∞–±–∞–Ω–∏–ª: {banned_user_mention}\n–°—Ä–æ–∫: –Ω–∞–≤—Å–µ–≥–¥–∞\n–ü—Ä–∏—á–∏–Ω–∞: {comment}")

@dp.message_handler(commands=['—Ä–∞–∑–±–∞–Ω', 'unban'], commands_prefix='!./', is_chat_admin=True)
async def cmd_unban(message):
  await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
  admin_mention = message.from_user.mention
  banned_user_mention = message.reply_to_message.from_user.mention
  await message.reply(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_mention}\n–†–∞–∑–±–∞–Ω–∏–ª: {banned_user_mention}")

@dp.message_handler(commands=['—Ä–∞–∑–º—É—Ç', 'unmute'], commands_prefix='!./', is_chat_admin=True)
async def cmd_unmute(message):
  await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
  admin_mention = message.from_user.mention
  muted_user_mention = message.reply_to_message.from_user.mention
  await message.reply(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_mention}\n–†–∞–∑–º—É—Ç–∏–ª: {muted_user_mention}")

@dp.message_handler(commands=['–º—É—Ç', '–º', 'mute'], commands_prefix='!./', is_chat_admin=True)
async def cmd_mute(message):
	comment = " ".join(message.text.split()[1:])
#	mutime = int(" ".join(message.text.split()[1]))
	admin_mention = message.from_user.mention
	muted_user_mention = message.reply_to_message.from_user.mention
	await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(hours=1))
	await message.reply(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_mention}\n–ó–∞–º—É—Ç–∏–ª: {muted_user_mention}\n–°—Ä–æ–∫: 1—á\n–ü—Ä–∏—á–∏–Ω–∞: {comment}")

@dp.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'], commands_prefix='!./')
async def cmd_start(message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
	await message.reply('–ò–¥–∏ –æ—Ç—Å—é–¥–∞, —è —Å–ø–ª—é')

@dp.message_handler(commands=['admins', '–∞–¥–º–∏–Ω—ã', '–∞–¥–º'], commands_prefix='!./')
async def get_admin_list(message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
	admins_id = [(admin.user.id, admin.user.full_name) for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
	admins_list = []
	for ids, name in admins_id:
		admins_list.append("".join(f"[{name}](tg://user?id={ids})"))
	result_list = ""
	l = admins_list
	for admins in admins_list:
		result_list += f'{l.index(admins)+1} >> ' + "".join(admins) + '\n'
	await message.reply("\nüòé –ê–¥–º–∏–Ω—ã :\n" + result_list, parse_mode = 'MARKDOWN')

# –≤–∏–ø–µ–±–ª—è
@dp.message_handler(commands=['–∞–≤–∏–ø', 'avip'], commands_prefix='!./')
async def vip_cmd(message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
	ls_vip_kb = InlineKeyboardButton('üëâ –õ–ò–ß–ù–ê–Ø –ü–ï–†–ï–ü–ò–°–ö–ê üëà', url=f'http://t.me/{config.BOT_USERNAME}?start')
	ls_vip_kb = InlineKeyboardMarkup().add(ls_vip_kb)
	if message.chat.type == 'supergroup':
		await message.reply('‚ùó–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º‚ùó', reply_markup=ls_vip_kb)
	if message.chat.type == 'private':
		vip_menu = InlineKeyboardMarkup()
		vip_kb = InlineKeyboardButton(text = '‚ú® –ö–æ–º–∞–Ω–¥—ã', callback_data = 'vip_kb')
		vip_check_kb = InlineKeyboardButton(text = 'üÉè VIP', callback_data = 'vip_check_kb')
		close_kb = InlineKeyboardButton(text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data = 'close_vip_kb')
		vip_menu.add(vip_check_kb, vip_kb)
		vip_menu.add(close_kb)
		await message.answer('üíé VIP –ø–∞–Ω–µ–ª—å üíé', reply_markup=vip_menu)

@dp.callback_query_handler(text='vip_check_kb')
async def handle_cdel_button(c: types.CallbackQuery):
	close_check_menu = InlineKeyboardMarkup()
	close_check_kb = InlineKeyboardButton(text = 'üö´ –û—Ç–º–µ–Ω–∞', callback_data = 'close_check_kb')
	close_check_menu.add(close_check_kb)
	for row in db.cursor.execute(f"SELECT vip FROM aleks_bot where id = {c.from_user.id}"):
		if row[0] == 'on':
			emot = '–ò–ú–ï–ï–¢–°–Ø ‚úÖ'
		elif row[0] == 'off':
			emot = f'–û–¢–°–£–¢–°–¢–í–£–ï–¢ ‚ùå\n\n–ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—Å —É {config.ADMIN_NAME}! \n –ï—Å–ª–∏ —É –≤–∞—Å —Å–ø–∞–º–±–∞–Ω, —Ç–æ –≤–∞–º —Å—é–¥–∞\n üëâ {config.SPAMBAN_ADMIN}'
		await c.message.edit_text(f'VIP —Å—Ç–∞—Ç—É—Å: {emot}', disable_web_page_preview=True, reply_markup=close_check_menu)

@dp.callback_query_handler(text='vip_kb')
async def handle_cdel_button(c: types.CallbackQuery):
	close_check_menu = InlineKeyboardMarkup()
	close_check_kb = InlineKeyboardButton(text = 'üö´ –û—Ç–º–µ–Ω–∞', callback_data = 'close_check_kb')
	close_check_menu.add(close_check_kb)
	await c.message.edit_text(f"""
‚ú®~ VIP –∫–æ–º–∞–Ω–¥—ã ~‚ú®

–ö–æ–¥–µ—Ä –æ—Ç–¥—ã—Ö–∞–µ—Ç, –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≥—è–ª–∏ –∏—Å–ª–∞–º
üòåü§ûüò¢

üèì –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∏ –≤ –ª—Å –∞–¥–º–∏–Ω–∞ ({config.ADMIN_NAME})
üíï –ï—Å–ª–∏ —É –≤–∞—Å —Å–ø–∞–º–±–∞–Ω, –ø–∏—à–∏—Ç–µ —Å—é—é–¥–∞
üëâ {config.SPAMBAN_ADMIN}
""", disable_web_page_preview=True, reply_markup=close_check_menu)

@dp.callback_query_handler(text='close_check_kb')
async def handle_cutton(c: types.CallbackQuery):
	vip_menu = InlineKeyboardMarkup()
	vip_kb = InlineKeyboardButton(text = '‚ú® –ö–æ–º–∞–Ω–¥—ã', callback_data = 'vip_kb')
	vip_check_kb = InlineKeyboardButton(text = 'üÉè –ü—Ä–æ–≤–µ—Ä–∫–∞', callback_data = 'vip_check_kb')
	close_kb = InlineKeyboardButton(text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data = 'close_vip_kb')
	vip_menu.add(vip_check_kb, vip_kb)
	vip_menu.add(close_kb)
	await c.message.edit_text('üíé VIP –ø–∞–Ω–µ–ª—å üíé', reply_markup=vip_menu)

@dp.callback_query_handler(text='close_vip_kb')
async def handle_cdel_button(c: types.CallbackQuery):
	await c.message.delete()

# –¥–µ–≤–±–æ—Ä–¥
@dp.message_handler(commands=['–∞–¥–µ–≤', 'adev'], commands_prefix='!./')
async def adm_ui(message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
	for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {message.from_user.id}"):
			if row[1] == 'off':
				await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! üòç')
			if row[1] == 'on':
				admin_menu = InlineKeyboardMarkup()
				statistics_bt = InlineKeyboardButton(text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stat')
				test_bt = InlineKeyboardButton(text = 'TID_TEST', callback_data = 'test_eb')
				mail_bt = InlineKeyboardButton(text = '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'rassilka')
				mail_bt2 = InlineKeyboardButton(text = 'üí¨ –ß–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data = 'chat_rassilka')
				cancel_del_menu = InlineKeyboardMarkup()
				cancel_del_bt = InlineKeyboardButton(text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data = 'cancel_del')
				admin_menu.add(statistics_bt)
				admin_menu.add(mail_bt, mail_bt2)
				admin_menu.add(cancel_del_bt)
				await message.answer('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=admin_menu)

@dp.callback_query_handler(text='cancel_del')
async def handle_cdel_button(c: types.CallbackQuery):
	for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {c.from_user.id}"):
			if row[1] == 'off':
				pass
			if row[1] == 'on':
				await c.message.delete()

@dp.callback_query_handler(text='stat')
async def handle_stat_button(c: types.CallbackQuery):
	for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {c.from_user.id}"):
		if row[1] == 'off':
			pass
		if row[1] == 'on':
			cancel_menu = InlineKeyboardMarkup()
			cancel_bt = InlineKeyboardButton(text = 'üö´ –û—Ç–º–µ–Ω–∞', callback_data = 'cancel')
			cancel_menu.add(cancel_bt)
			db.cursor.execute("SELECT id FROM aleks_bot")
			row = db.cursor.fetchall()
			users = row
			cdb.cursor.execute("SELECT chat_id FROM chats_aleks")
			roww = db.cursor.fetchall()
			groups = roww
			await c.message.edit_text(f'üë§ –Æ–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ: {str(len(users))}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüí¨ –ß–∞—Ç–æ–≤ –≤ –±–æ—Ç–µ: {str(len(groups))}', reply_markup = cancel_menu)

@dp.callback_query_handler(text='cancel')
async def cancel_wnum_button_handler(c: types.callback_query):
	for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {c.from_user.id}"):
		if row[1] == 'off':
			pass
		if row[1] == 'on':
			admin_menu = InlineKeyboardMarkup()
			statistics_bt = InlineKeyboardButton(text = 'üçµ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stat')
			test_bt = InlineKeyboardButton(text = 'TID_TEST', callback_data = 'test_eb')
			mail_bt = InlineKeyboardButton(text = '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'rassilka')
			mail_bt2 = InlineKeyboardButton(text = 'üí¨ –ß–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data = 'chat_rassilka')
			cancel_del_menu = InlineKeyboardMarkup()
			cancel_del_bt = InlineKeyboardButton(text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data = 'cancel_del')
			admin_menu.add(statistics_bt)
			admin_menu.add(mail_bt, mail_bt2)
			admin_menu.add(cancel_del_bt)
			await c.message.edit_text('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=admin_menu)
			
# –¥–¥–µ–≤
@dp.message_handler(commands=['admin_dev'], commands_prefix='!./')
async def give_dev(message):
	try:
		for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {message.from_user.id}"):
			dev_id_leak = int(" ".join(message.text.split()[1:]))
			if row[0] == message.from_user.id:
				if row[1] == 'off':
					await message.reply(f'–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üòØüñï')
				if row[1] == 'on':
					for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {dev_id_leak}"):
						if row[0] == dev_id_leak:
							if row[1] == 'on':
								db.cursor.execute(f'UPDATE aleks_bot SET dev = "off" where id = {dev_id_leak}')
								db.con.commit()
								await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{dev_id_leak}</code> –æ—Ç–∫–ª—é—á–µ–Ω DEV —Å—Ç–∞—Ç—É—Å üòò')
							if row[1] == 'off':
								db.cursor.execute(f'UPDATE aleks_bot SET dev = "on" where id = {dev_id_leak}')
								db.con.commit()
								await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{dev_id_leak}</code> –ø–æ–¥–∫–ª—é—á–µ–Ω DEV —Å—Ç–∞—Ç—É—Å üòé')
	except:
		await message.reply(f'–û—à–∏–±–∫–∞!!!')

# –¥–≤–∏–ø
@dp.message_handler(commands=['admin_vip'], commands_prefix='!./')
async def give_vip(message):
	try:
		for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {message.from_user.id}"):
			vip_id_leak = int(" ".join(message.text.split()[1:]))
			if row[0] == message.from_user.id:
				if row[1] == 'off':
					await message.reply(f'–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üòØüñï')
				if row[1] == 'on':
					for row in db.cursor.execute(f"SELECT id, vip FROM aleks_bot where id = {vip_id_leak}"):
						if row[0] == vip_id_leak:
							if row[1] == 'on':
								db.cursor.execute(f'UPDATE aleks_bot SET vip = "off" where id = {vip_id_leak}')
								db.con.commit()
								await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{vip_id_leak}</code> –æ—Ç–∫–ª—é—á–µ–Ω VIP —Å—Ç–∞—Ç—É—Å üòò')
							if row[1] == 'off':
								db.cursor.execute(f'UPDATE aleks_bot SET vip = "on" where id = {vip_id_leak}')
								db.con.commit()
								await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{vip_id_leak}</code> –ø–æ–¥–∫–ª—é—á–µ–Ω VIP —Å—Ç–∞—Ç—É—Å ü§ë')
	except:
		await message.reply(f'–û—à–∏–±–∫–∞!!!')

class Rass(StatesGroup):
	msg = State()

class ChRass(StatesGroup):
	msg = State()

@dp.callback_query_handler(text="rassilka")
async def send_rass(call: types.CallbackQuery):
	for row in db.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {call.from_user.id}"):
		if row[0] == call.from_user.id:
			if row[1] == 'off':
				pass
			elif row[1] == 'on':
				id = call.from_user.id
				await call.message.answer(text='üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
				await Rass.msg.set()

@dp.message_handler(content_types=ContentType.ANY, state=Rass.msg)
async def rassilka_msgl(message: types.Message, state: FSMContext):
	await state.finish()
	db.cursor.execute(f"SELECT id FROM aleks_bot")
	users_query = db.cursor.fetchall()
	user_ids = [user[0] for user in users_query]
	confirm = []
	decline = []
	bot_msg = await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
	for i in user_ids:
		try:
			await message.copy_to(i)
			confirm.append(i)
		except:
			decline.append(i)
		await asyncio.sleep(0.3)
	await bot_msg.edit_text(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')

@dp.message_handler(content_types=ContentType.ANY, state=ChRass.msg)
async def rassilka_msgl(message: types.Message, state: FSMContext):
	await state.finish()
	cdb.cursor.execute(f"SELECT chat_id FROM chats_aleks")
	chats_query = cdb.cursor.fetchall()
	chat_ids = [chat[0] for chat in chats_query]
	confirm = []
	decline = []
	bot_msg = await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
	for i in chat_ids:
		try:
			await message.copy_to(i)
			confirm.append(i)
		except:
			decline.append(i)
		await asyncio.sleep(0.3)
	await bot_msg.edit_text(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')

@dp.callback_query_handler(text="chat_rassilka")
async def send_rass(call: types.CallbackQuery):
	for row in cdb.cursor.execute(f"SELECT id, dev FROM aleks_bot where id = {call.from_user.id}"):
		if row[0] == call.from_user.id:
			if row[1] == 'off':
				pass
			if row[1] == 'on':
				id = call.from_user.id
				await call.message.answer(text='üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
				await ChRass.msg.set()

# —Ä–µ–≥–≥–≥–≥–≥
@dp.message_handler(commands=['regg', '—Ä–µ–≥–≥'], commands_prefix='!./')
async def gg1db_join(message):
	mrtmfui = message.reply_to_message.from_user.id
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {mrtmfui}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.reply_to_message.from_user.first_name, message.reply_to_message.from_user.id)
		await message.reply(f"{message.reply_to_message.from_user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

@dp.message_handler(commands=['reg', '—Ä–µ–≥'], commands_prefix='!./')
async def db_join(message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
		await message.reply(f"{message.from_user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

@dp.message_handler(commands=['bind', '–ø—Ä–∏–≤—è–∑–∞—Ç—å', '–ø—Ä–∏–≤—è–∑–∫–∞', '–ø—Ä'], commands_prefix='!./')
async def privazka(message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
	if message.chat.type == 'supergroup':
		cdb.cursor.execute(f"SELECT chat_name, chat_id FROM chats_aleks where chat_id = {message.chat.id}")
		if cdb.cursor.fetchone() == None:
			cdb.InsertChatValues(message.chat.title, message.chat.id)
			await message.reply('–í—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ –±–æ—Ç–∞ –∫ —á–∞—Ç—É üõ°')
		else:
			await message.reply('–ë–æ—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É ‚úÖ')
	if message.chat.type == 'private':
		await message.reply('–í–≤–µ–¥–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Å–≤–æ–µ–º —á–∞—Ç–µ üëª')

@dp.message_handler(content_types=["new_chat_members"])
async def new_chat_member(message: types.Message):
	db.cursor.execute(f"SELECT name FROM aleks_bot where id = {message.from_user.id}")
	if db.cursor.fetchone() == None:
		db.InsertValues(message.from_user.first_name, message.from_user.id)
		await message.delete()
		await message.reply(f"""
üë§ [{message.new_chat_members[0].full_name}](tg://user?id={message.new_chat_members[0].id})
üÜî - <code>{message.from_user.id}<\code>
üåÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑—ã–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!
üî∑–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!
""")
	else:
		await message.delete()
		await message.reply(f"""
üë§ [{message.new_chat_members[0].full_name}](tg://user?id={message.new_chat_members[0].id})
üÜî - <code>{message.from_user.id}<\code>
üî∑–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!
""", parse_mode='HTML')

@dp.message_handler(content_types=["left_chat_member"])
async def leave_chat(message: types.Message):
	await message.delete()


# –≤—Å–µ –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω, –∏–¥—É –Ω—é—Ö–∞—Ç—å –±–µ–±—Ä—É :D

# –ø–æ–ª–ª–∏–Ω–≥228
aiogram.utils.executor.start_polling(dp, on_startup=send_adm, skip_updates=True)